package main;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.IntStream;
import javax.swing.ImageIcon;

/**
 *
 * @author georggrubner
 */
public class Main extends javax.swing.JFrame {

    private static final String CALCULATION_SUCCESSFULL = "Calculation finished: ";

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setIconImage(new ImageIcon("src" + File.separator + "favicon.png").getImage());

        setupDays();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanelStatusBar = new javax.swing.JPanel();
        jLabelStatusBar = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Advent of Code 2020");
        setMinimumSize(new java.awt.Dimension(865, 410));

        jPanel1.setLayout(new java.awt.GridLayout(5, 5, 5, 5));
        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanelStatusBar.setBackground(new java.awt.Color(204, 204, 204));

        jLabelStatusBar.setText("Application loaded sucessfully");

        javax.swing.GroupLayout jPanelStatusBarLayout = new javax.swing.GroupLayout(jPanelStatusBar);
        jPanelStatusBar.setLayout(jPanelStatusBarLayout);
        jPanelStatusBarLayout.setHorizontalGroup(
            jPanelStatusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStatusBarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelStatusBar, javax.swing.GroupLayout.DEFAULT_SIZE, 874, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelStatusBarLayout.setVerticalGroup(
            jPanelStatusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStatusBarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelStatusBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanelStatusBar, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelStatusBar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelStatusBar;
    // End of variables declaration//GEN-END:variables

    private void updateStatus(String status) {
        jLabelStatusBar.setText(status);
    }

    private ActionListener getErrorListener(String dayName, int i) {
        return (ActionEvent e) -> {
            updateStatus("Could not find calculation for " + dayName + ": Puzzle " + i);
        };
    }

    private ActionListener getRiddleListener(Calculation calc, String inputFileName, String dayName, int i) {
        try {
            Method method = calc.getClass().getMethod("calculateStar" + i, String.class);
            return (ActionEvent e) -> {
                updateStatus("Start calculation...");
                new Thread(() -> {
                    try {
                        String result = (String) method.invoke(calc, inputFileName);
                        updateStatus(CALCULATION_SUCCESSFULL + result);
                        copyToClipboard(result);
                    } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                        updateStatus("Calculation failed for " + dayName + " star " + i + " - " + ex.getMessage());
                    }
                }).start();
            };
        } catch (NoSuchMethodException | SecurityException ex) {
            return getErrorListener(dayName, i);
        }
    }

    private void setupDays() {
        IntStream.range(0, 25).forEach(i -> {
            int row = (i / 5);
            int column = i % 5;
            int day = row * 5 + column + 1;
            String dayName = utils.getDayName(day);
            ActionListener riddle1;
            ActionListener riddle2;
            String inputFileName = "input" + File.separator + "input." + dayName + ".txt";
            try {
                Class<?> dayClass = Class.forName("calender." + dayName);
                Calculation calc = (Calculation) dayClass.newInstance();

                riddle1 = getRiddleListener(calc, inputFileName, dayName, 1);
                riddle2 = getRiddleListener(calc, inputFileName, dayName, 2);

            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
                riddle1 = getErrorListener(dayName, 1);
                riddle2 = getErrorListener(dayName, 2);
            }
            JDay jDay = new JDay(day, riddle1, riddle2);
            jPanel1.add(jDay);
        });
    }

    private void copyToClipboard(String result) {
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Clipboard clipboard = toolkit.getSystemClipboard();
        StringSelection strSel = new StringSelection(result);
        clipboard.setContents(strSel, null);
    }
}
